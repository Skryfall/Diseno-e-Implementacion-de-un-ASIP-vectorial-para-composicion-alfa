
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ADDVV CMPI CMPR COMA COMMENT DIV DIVVE DOSPUNTOS FIN IMM INICIO JEQ JMP LABEL LDR LDRV MOVI MOVR MUL MULVE PUNTOCOMA REGESCALAR REGVECTORIAL STL STR STRV SUB SUBVV\n    Start : code\n    \n    code : INICIO DOSPUNTOS cuerpo FIN\n    \n    cuerpo : instruccion\n            | label\n            | comment\n    \n    comment : COMMENT  cuerpo\n            | COMMENT empty\n\n    \n    label : LABEL DOSPUNTOS cuerpo\n            | empty\n    \n    instruccion : instructionDI\n                  | instructionI\n                  | instructionDT\n                  | instructionN\n                  | instructionSTL\n    \n    instructionSTL : STL PUNTOCOMA cuerpo\n                    | empty\n    \n    instructionDI : instructionDIName REG COMA REG PUNTOCOMA cuerpo\n\n                        | empty\n    \n    instructionI : instructionIName REG COMA IMM PUNTOCOMA cuerpo\n    | empty\n    \n    REG : REGESCALAR\n        | REGVECTORIAL\n    \n    instructionDT : instructionDTName REG COMA REG COMA REG PUNTOCOMA cuerpo\n                        | empty\n    \n    instructionN :  instructionNName LABEL PUNTOCOMA cuerpo\n                        | empty\n    \n    instructionDIName :  STR\n            | LDR\n            | MOVR\n            | CMPR\n            | STRV\n            | LDRV\n\n    \n    instructionIName : MOVI\n            | CMPI\n    \n    instructionDTName :  ADD\n            | SUB\n            | MUL\n            | DIV\n            | ADDVV\n            | SUBVV\n            | MULVE\n            | DIVVE\n    \n    instructionNName :  JMP\n            | JEQ\n            | STL\n    \n    empty :\n    '
    
_lr_action_items = {'INICIO':([0,],[3,]),'$end':([1,2,40,],[0,-1,-2,]),'DOSPUNTOS':([3,14,],[4,41,]),'LABEL':([4,16,20,21,38,39,41,50,55,61,62,67,],[14,14,49,-45,-43,-44,14,14,14,14,14,14,]),'COMMENT':([4,16,41,50,55,61,62,67,],[16,16,16,16,16,16,16,16,]),'STL':([4,16,41,50,55,61,62,67,],[21,21,21,21,21,21,21,21,]),'FIN':([4,5,6,7,8,9,10,11,12,13,15,16,41,42,43,50,51,55,56,60,61,62,64,65,67,68,],[-46,40,-3,-4,-5,-10,-11,-12,-13,-14,-9,-46,-46,-6,-7,-46,-8,-46,-15,-25,-46,-46,-17,-19,-46,-23,]),'STR':([4,16,41,50,55,61,62,67,],[22,22,22,22,22,22,22,22,]),'LDR':([4,16,41,50,55,61,62,67,],[23,23,23,23,23,23,23,23,]),'MOVR':([4,16,41,50,55,61,62,67,],[24,24,24,24,24,24,24,24,]),'CMPR':([4,16,41,50,55,61,62,67,],[25,25,25,25,25,25,25,25,]),'STRV':([4,16,41,50,55,61,62,67,],[26,26,26,26,26,26,26,26,]),'LDRV':([4,16,41,50,55,61,62,67,],[27,27,27,27,27,27,27,27,]),'MOVI':([4,16,41,50,55,61,62,67,],[28,28,28,28,28,28,28,28,]),'CMPI':([4,16,41,50,55,61,62,67,],[29,29,29,29,29,29,29,29,]),'ADD':([4,16,41,50,55,61,62,67,],[30,30,30,30,30,30,30,30,]),'SUB':([4,16,41,50,55,61,62,67,],[31,31,31,31,31,31,31,31,]),'MUL':([4,16,41,50,55,61,62,67,],[32,32,32,32,32,32,32,32,]),'DIV':([4,16,41,50,55,61,62,67,],[33,33,33,33,33,33,33,33,]),'ADDVV':([4,16,41,50,55,61,62,67,],[34,34,34,34,34,34,34,34,]),'SUBVV':([4,16,41,50,55,61,62,67,],[35,35,35,35,35,35,35,35,]),'MULVE':([4,16,41,50,55,61,62,67,],[36,36,36,36,36,36,36,36,]),'DIVVE':([4,16,41,50,55,61,62,67,],[37,37,37,37,37,37,37,37,]),'JMP':([4,16,41,50,55,61,62,67,],[38,38,38,38,38,38,38,38,]),'JEQ':([4,16,41,50,55,61,62,67,],[39,39,39,39,39,39,39,39,]),'REGESCALAR':([17,18,19,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,52,54,63,],[45,45,45,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,45,45,45,]),'REGVECTORIAL':([17,18,19,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,52,54,63,],[46,46,46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,46,46,46,]),'PUNTOCOMA':([21,45,46,49,57,58,66,],[50,-21,-22,55,61,62,67,]),'COMA':([44,45,46,47,48,59,],[52,-21,-22,53,54,63,]),'IMM':([53,],[58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Start':([0,],[1,]),'code':([0,],[2,]),'cuerpo':([4,16,41,50,55,61,62,67,],[5,42,51,56,60,64,65,68,]),'instruccion':([4,16,41,50,55,61,62,67,],[6,6,6,6,6,6,6,6,]),'label':([4,16,41,50,55,61,62,67,],[7,7,7,7,7,7,7,7,]),'comment':([4,16,41,50,55,61,62,67,],[8,8,8,8,8,8,8,8,]),'instructionDI':([4,16,41,50,55,61,62,67,],[9,9,9,9,9,9,9,9,]),'instructionI':([4,16,41,50,55,61,62,67,],[10,10,10,10,10,10,10,10,]),'instructionDT':([4,16,41,50,55,61,62,67,],[11,11,11,11,11,11,11,11,]),'instructionN':([4,16,41,50,55,61,62,67,],[12,12,12,12,12,12,12,12,]),'instructionSTL':([4,16,41,50,55,61,62,67,],[13,13,13,13,13,13,13,13,]),'empty':([4,16,41,50,55,61,62,67,],[15,43,15,15,15,15,15,15,]),'instructionDIName':([4,16,41,50,55,61,62,67,],[17,17,17,17,17,17,17,17,]),'instructionIName':([4,16,41,50,55,61,62,67,],[18,18,18,18,18,18,18,18,]),'instructionDTName':([4,16,41,50,55,61,62,67,],[19,19,19,19,19,19,19,19,]),'instructionNName':([4,16,41,50,55,61,62,67,],[20,20,20,20,20,20,20,20,]),'REG':([17,18,19,52,54,63,],[44,47,48,57,59,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Start","S'",1,None,None,None),
  ('Start -> code','Start',1,'p_Start','KiliASMSintax.py',11),
  ('code -> INICIO DOSPUNTOS cuerpo FIN','code',4,'p_Code','KiliASMSintax.py',17),
  ('cuerpo -> instruccion','cuerpo',1,'p_cuerpo','KiliASMSintax.py',22),
  ('cuerpo -> label','cuerpo',1,'p_cuerpo','KiliASMSintax.py',23),
  ('cuerpo -> comment','cuerpo',1,'p_cuerpo','KiliASMSintax.py',24),
  ('comment -> COMMENT cuerpo','comment',2,'p_Comment','KiliASMSintax.py',30),
  ('comment -> COMMENT empty','comment',2,'p_Comment','KiliASMSintax.py',31),
  ('label -> LABEL DOSPUNTOS cuerpo','label',3,'p_label','KiliASMSintax.py',39),
  ('label -> empty','label',1,'p_label','KiliASMSintax.py',40),
  ('instruccion -> instructionDI','instruccion',1,'p_instruccion','KiliASMSintax.py',50),
  ('instruccion -> instructionI','instruccion',1,'p_instruccion','KiliASMSintax.py',51),
  ('instruccion -> instructionDT','instruccion',1,'p_instruccion','KiliASMSintax.py',52),
  ('instruccion -> instructionN','instruccion',1,'p_instruccion','KiliASMSintax.py',53),
  ('instruccion -> instructionSTL','instruccion',1,'p_instruccion','KiliASMSintax.py',54),
  ('instructionSTL -> STL PUNTOCOMA cuerpo','instructionSTL',3,'p_instructionSTL','KiliASMSintax.py',61),
  ('instructionSTL -> empty','instructionSTL',1,'p_instructionSTL','KiliASMSintax.py',62),
  ('instructionDI -> instructionDIName REG COMA REG PUNTOCOMA cuerpo','instructionDI',6,'p_instructionDI','KiliASMSintax.py',70),
  ('instructionDI -> empty','instructionDI',1,'p_instructionDI','KiliASMSintax.py',72),
  ('instructionI -> instructionIName REG COMA IMM PUNTOCOMA cuerpo','instructionI',6,'p_instructionI','KiliASMSintax.py',79),
  ('instructionI -> empty','instructionI',1,'p_instructionI','KiliASMSintax.py',80),
  ('REG -> REGESCALAR','REG',1,'p_REG','KiliASMSintax.py',88),
  ('REG -> REGVECTORIAL','REG',1,'p_REG','KiliASMSintax.py',89),
  ('instructionDT -> instructionDTName REG COMA REG COMA REG PUNTOCOMA cuerpo','instructionDT',8,'p_instructionDT','KiliASMSintax.py',97),
  ('instructionDT -> empty','instructionDT',1,'p_instructionDT','KiliASMSintax.py',98),
  ('instructionN -> instructionNName LABEL PUNTOCOMA cuerpo','instructionN',4,'p_instructionN','KiliASMSintax.py',109),
  ('instructionN -> empty','instructionN',1,'p_instructionN','KiliASMSintax.py',110),
  ('instructionDIName -> STR','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',117),
  ('instructionDIName -> LDR','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',118),
  ('instructionDIName -> MOVR','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',119),
  ('instructionDIName -> CMPR','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',120),
  ('instructionDIName -> STRV','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',121),
  ('instructionDIName -> LDRV','instructionDIName',1,'p_instructionDIName','KiliASMSintax.py',122),
  ('instructionIName -> MOVI','instructionIName',1,'p_instructionIName','KiliASMSintax.py',131),
  ('instructionIName -> CMPI','instructionIName',1,'p_instructionIName','KiliASMSintax.py',132),
  ('instructionDTName -> ADD','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',140),
  ('instructionDTName -> SUB','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',141),
  ('instructionDTName -> MUL','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',142),
  ('instructionDTName -> DIV','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',143),
  ('instructionDTName -> ADDVV','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',144),
  ('instructionDTName -> SUBVV','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',145),
  ('instructionDTName -> MULVE','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',146),
  ('instructionDTName -> DIVVE','instructionDTName',1,'p_instructionDTName','KiliASMSintax.py',147),
  ('instructionNName -> JMP','instructionNName',1,'p_instructionNName','KiliASMSintax.py',154),
  ('instructionNName -> JEQ','instructionNName',1,'p_instructionNName','KiliASMSintax.py',155),
  ('instructionNName -> STL','instructionNName',1,'p_instructionNName','KiliASMSintax.py',156),
  ('empty -> <empty>','empty',0,'p_empty','KiliASMSintax.py',163),
]
